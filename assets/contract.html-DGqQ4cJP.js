import{_ as n,o as s,c as a,a as t}from"./app-BDIELRID.js";const e={},o=t(`<h1 id="contract" tabindex="-1"><a class="header-anchor" href="#contract"><span>Contract</span></a></h1><p>All the contract methods can be gotten from this import</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/internals/contract&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/types&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/utils&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>functions that return decimals or int can be decoded with</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	resultStr<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">ConvertHexToBigInt</span><span class="token punctuation">(</span> result<span class="token punctuation">)</span>

	denominatorStr <span class="token operator">:=</span> <span class="token string">&quot;1&quot;</span>
	<span class="token comment">//setting the precision to 18 is not compulsory, but it defaults to 18</span>
	ethbalance<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">DivideLargeNumbers</span><span class="token punctuation">(</span>resultStr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> denominatorStr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>ethbalance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>functions that returns string can be decoded with</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>    res<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">HexToText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abi-application-binary-interface" tabindex="-1"><a class="header-anchor" href="#abi-application-binary-interface"><span>ABI (Application Binary Interface)</span></a></h2><p>In Goether, the ABI (Application Binary Interface) encoding is designed to be human-readable. To define your ABI, you create a map where the keys represent function names and the values represent the function definitions including parameter types where necessary.</p><p>Example of a Simple ABI Definition:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>abi <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;function balanceOf(address)&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Comprehensive ABI Map Example:</strong> You can encapsulate all your function definitions within a single ABI map construct. Below is an example ABI map containing various function definitions:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>abi <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;decimals&quot;</span><span class="token punctuation">:</span>      <span class="token string">&quot;function decimals()&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">:</span>        <span class="token string">&quot;function symbol() view returns (string)&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>          <span class="token string">&quot;function name()&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;totalSupply&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;function totalSupply()&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;function balanceOf(address)&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;transfer&quot;</span><span class="token punctuation">:</span>      <span class="token string">&quot;function transfer(address to, uint256 value)&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;TransferEvent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;event Transfer(address from, address to, uint256 value)&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ABI map provides a clear and concise representation of the functions available within the smart contract, making it easy to understand and interact with.</p><h2 id="function-data" tabindex="-1"><a class="header-anchor" href="#function-data"><span>Function Data</span></a></h2><p>When interacting with functions that require arguments within the smart contract ABI, you define the function data as a map. This map includes the function name and its corresponding arguments.</p><p>The data parameter, which is a map of string interface, follows a key-value structure. The first key, &quot;functionName&quot;, must be of type string and it&#39;s value represents the name of the function you want to call as defined in your ABI key. The corresponding value is the function definition key in your ABI.</p><p>Example of Function Data with Arguments:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;functionName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;0xe9a406f1bb9C0bb1D8Fb8Af3eE50b3C37d1F0Eb2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li><code>functionName</code>: must remain as <code>&quot;functionName&quot;</code> as key and the value is the key of the function you want to call as defined in your ABI .</li><li><code>args</code>: Contains an array of arguments required by the function. Each argument is specified as an element within the array. Here, the balanceOf function is being called with the argument &quot;0xe9a406f1bb9C0bb1D8Fb8Af3eE50b3C37d1F0Eb2&quot;, which represents the address for which the balance is being queried.</li></ul><blockquote><p>Arguements value order: When defining <code>args</code> value they must follow the same order as the parameters in the contract parameters such that a transfer function defined as <code>function Transfer(address to,uint256 value)</code> should have args value as:</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;0xe9a406f1bb9C0bb1D8Fb8Af3eE50b3C37d1F0Eb2,10&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>where address comes first and value comes second</p><h2 id="read-only" tabindex="-1"><a class="header-anchor" href="#read-only"><span>Read-Only</span></a></h2><p>A read-only method is one which cannot change the state of the blockchain, but often provide a simple interface to get important data about a Contract.</p><p>The <code>contract.Read</code> function is responsible for retrieving data of a given contract using the <code>github.com/goethercore/goether/internals/contract</code> call.</p><blockquote><p>Parameters : This function takes 5(five) parameters directly. both as strings respectively and in this order:</p></blockquote><ul><li><p><code>rpc</code>: An RPC (Remote Procedure Call) client instance to interact with the blockchain network.</p></li><li><p><code>abi</code>: A map containing the ABI (Application Binary Interface) of the smart contract. The ABI defines the structure of the contract including its functions and events.</p></li><li><p><code>contractAddress</code>: The address of the smart contract deployed on the blockchain network.</p></li><li><p><code>wallet</code>: The address of the wallet or account from which the contract interaction is initiated.</p></li><li><p><code>data</code>: A map containing information required to execute specific functions defined in the smart contract ABI.</p></li><li><p>Example of Get balance which is a readonly</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">readContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> contractAddress<span class="token operator">=</span><span class="token string">&quot;0x202a60A75892CB0EB352fCe2cce5c57EfBFc3CB1&quot;</span>
<span class="token keyword">var</span> walletAddress <span class="token operator">=</span> <span class="token string">&quot;0xe9a406f1bb9C0bb1D8Fb8Af3eE50b3C37d1F0Eb2&quot;</span>
<span class="token keyword">var</span> rpc <span class="token operator">=</span> <span class="token string">&quot;https://polygon-mumbai.g.alchemy.com/v2/**************&quot;</span>

   <span class="token comment">//ABI definition</span>
	abi <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;function balanceOf(address)&quot;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/**
	* Function key functionName - (balaceOf) as defined as
	* the ABI key for function balanceOf(address) method in the ABI of your abi
	* and contract.
	* Function key args- is a slice of interfaces, each object in the interface should be ordered
	* the same way as each parameter in the contract function
	*/</span>
	data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;functionName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;0xe9a406f1bb9C0bb1D8Fb8Af3eE50b3C37d1F0Eb2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// corrected syntax</span>
	<span class="token punctuation">}</span>

    <span class="token comment">// Call the Read function of goether method</span>
	result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> contract<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>rpc<span class="token punctuation">,</span> abi<span class="token punctuation">,</span> contractAddress<span class="token punctuation">,</span> walletAddress<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	<span class="token comment">//Convert Hex decimal value to bigInt</span>
	resultStr<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">ConvertHexToBigInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

	denominatorStr <span class="token operator">:=</span> <span class="token string">&quot;1000000000000000000&quot;</span>
	<span class="token comment">//setting the precision to 18 is not compulsory, but it defaults to 18</span>
	ethbalance<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">DivideLargeNumbers</span><span class="token punctuation">(</span>resultStr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> denominatorStr<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>ethbalance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Example of get contract token name which is also a read only, this function requires no parameter, so the data field remains empty</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
	abi <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>          <span class="token string">&quot;function name()&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;function balanceOf(address)&quot;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/**
	* Function data with function name - (name) as defined as
	* the ABI key for function name() method in the ABI of your abi
	* and contract.
	*/</span>
	data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;functionName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// corrected syntax</span>
	<span class="token punctuation">}</span>

	result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> contract<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>rpc<span class="token punctuation">,</span> abi<span class="token punctuation">,</span> contractAddress<span class="token punctuation">,</span> walletAddress<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    res<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">HexToText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="write-state" tabindex="-1"><a class="header-anchor" href="#write-state"><span>Write State</span></a></h2><p>A write method is one which changes the state of the blockchain, but often provide a simple interface State-Modifying call data about a Contract.</p><p>The <code>contract.Write</code> function is responsible for altering the state of a data of a given contract using the <code>github.com/goethercore/goether/internals/contract</code> call.</p><blockquote><p>Parameters : This function takes 5(five) parameters directly. both as strings respectively and in this order:</p></blockquote><ul><li><p><code>rpc</code>: An RPC (Remote Procedure Call) client instance to interact with the blockchain network.</p></li><li><p><code>privateKey</code>: The private key of the wallet or account from which the contract interaction is initiated.</p></li><li><p><code>abi</code>: A map containing the ABI (Application Binary Interface) of the smart contract. The ABI defines the structure of the contract including its functions and events.</p></li><li><p><code>contractAddress</code>: The address of the smart contract deployed on the blockchain network.</p></li><li><p><code>data</code>: A map containing information required to execute specific functions defined in the smart contract ABI.</p></li><li><p>Example of Transfer which is a State-Modifying Function</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> amt <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">var</span> rpc <span class="token operator">=</span> <span class="token string">&quot;https://polygon-mumbai.g.alchemy.com/v2/**************&quot;</span>
<span class="token keyword">var</span> contractAddress<span class="token operator">=</span><span class="token string">&quot;0x202a60A75892CB0EB352fCe2cce5c57EfBFc3CB1&quot;</span>
<span class="token keyword">var</span> privateKey<span class="token operator">=</span><span class="token string">&quot;cbad43450ab9a433cc202a60A75892CB0EB352fCe2cce5c57EfBFc3CB1&quot;</span>
<span class="token keyword">var</span> reciever <span class="token operator">=</span> <span class="token string">&quot;0xC1B9271024a8512A73481230b94bFbe60E131054&quot;</span>
<span class="token keyword">func</span> <span class="token function">mutateContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	abi <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;decimals&quot;</span><span class="token punctuation">:</span>      <span class="token string">&quot;function decimals()&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;symbol&quot;</span><span class="token punctuation">:</span>        <span class="token string">&quot;function symbol()&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>          <span class="token string">&quot;function name()&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;totalSupply&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;function totalSupply()&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;balanceOf&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;function balanceOf(address)&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;transfer&quot;</span><span class="token punctuation">:</span>      <span class="token string">&quot;function transfer(address to, uint256 value)&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;TransferEvent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;event Transfer(address from, address to, uint256 value)&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/**
	* Function key functionName - (transfer) as defined as
	* the ABI key for function transfer(address to, uint256 value) method in the ABI of your abi
	* and contract.
	* Function key args- is a slice of interfaces, each object in the interface should be ordered
	* the same way as each parameter in the contract function
	*/</span>
	data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;functionName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;transfer&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>reciever<span class="token punctuation">,</span> amt<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// corrected syntax</span>
	<span class="token punctuation">}</span>
    <span class="token comment">/**
    * The Write function params takes RPCURL, your private key, 
    * the ABI, your contract address, the data
    */</span>
	result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> contract<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>rpc<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> abi<span class="token punctuation">,</span> contractAddress<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    
    res<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">HexToText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),i=[o];function c(p,l){return s(),a("div",null,i)}const r=n(e,[["render",c],["__file","contract.html.vue"]]),d=JSON.parse('{"path":"/contract.html","title":"Contract","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ABI (Application Binary Interface)","slug":"abi-application-binary-interface","link":"#abi-application-binary-interface","children":[]},{"level":2,"title":"Function Data","slug":"function-data","link":"#function-data","children":[]},{"level":2,"title":"Read-Only","slug":"read-only","link":"#read-only","children":[]},{"level":2,"title":"Write State","slug":"write-state","link":"#write-state","children":[]}],"git":{"updatedTime":1710713270000,"contributors":[{"name":"Ayo Solomon","email":"48213053+Ayoseun@users.noreply.github.com","commits":6}]},"filePathRelative":"contract.md"}');export{r as comp,d as data};
