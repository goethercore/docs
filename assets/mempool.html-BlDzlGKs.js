import{_ as n,o as s,c as a,a as t}from"./app-C_2_kWfU.js";const o={},e=t(`<h1 id="mempool" tabindex="-1"><a class="header-anchor" href="#mempool"><span>MemPool</span></a></h1><p>All the mempool methods can be gotten from this import</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/internals/mempool&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/types&quot;</span>
	<span class="token string">&quot;github.com/goethercore/goether/utils&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream-mempool-transaction" tabindex="-1"><a class="header-anchor" href="#stream-mempool-transaction"><span>Stream Mempool Transaction</span></a></h2><p>The <code>mempool.StreamMempoolTransactions()</code> function streams mempool transactions using the <code>github.com/goethercore/goether/internals/mempool</code> from a specified RPC endpoint. It initializes a channel to receive transaction data and starts a goroutine to continuously listen for incoming data.</p><blockquote><p>Parameters : This function takes 2(two) parameters directly. both as strings respectively and in this order:</p></blockquote><ul><li><code>rpc</code>: An RPC (Remote Procedure Call) client instance to interact with the blockchain network.</li><li><code>channel</code>: Accepts an unbuffered channels to recieve the stream.</li></ul><p><code>Description</code>: This function connects to the specified WebSocket endpoint (rpc) and continuously listens for mempool transactions. Each incoming transaction is decoded and printed to the console, displaying the sender, amount, and recipient of the transaction.</p><ul><li>Example</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ListenMempool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	poolCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> rpc <span class="token operator">=</span> <span class="token string">&quot;wss://polygon-mumbai.g.alchemy.com/v2/***************&quot;</span>

	<span class="token keyword">go</span> mempool<span class="token punctuation">.</span><span class="token function">StreamMempoolTransactions</span><span class="token punctuation">(</span>rpc<span class="token punctuation">,</span> poolCh<span class="token punctuation">)</span>
	<span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> poolCh <span class="token punctuation">{</span>
		<span class="token keyword">var</span> poolData types<span class="token punctuation">.</span>MempoolData
		<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>poolData<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error unmarshaling&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		amount<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">DecodeBig</span><span class="token punctuation">(</span>poolData<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error decoding hex value&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Transaction From: %s of %s to %s \\n&quot;</span><span class="token punctuation">,</span> poolData<span class="token punctuation">.</span>From<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> poolData<span class="token punctuation">.</span>To<span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream-contract-mempool-transaction" tabindex="-1"><a class="header-anchor" href="#stream-contract-mempool-transaction"><span>Stream Contract Mempool Transaction</span></a></h2><p>The <code>mempool.ContractMempoolTransactions()</code> function streams mempool transactions of a contract using the <code>github.com/goethercore/goether/internals/mempool</code> from a specified RPC endpoint. It initializes a channel to receive transaction data and starts a goroutine to continuously listen for incoming data.</p><blockquote><p>Parameters : This function takes 3(three) parameters directly. both as strings respectively and in this order:</p></blockquote><ul><li><code>rpc</code>: An RPC (Remote Procedure Call) client instance to interact with the blockchain network which must be a websocket url.</li><li><code>contractAddress</code>: The contract address of the contract at which you want to monitor</li><li><code>channel</code>: Accepts an unbuffered channel to recieve the stream.</li></ul><p><code>Description</code>: This function connects to the specified WebSocket endpoint (rpc) and continuously listens fora contracts mempool transactions. Each incoming transaction is decoded and printed to the console, displaying the sender, amount, and recipient of the transaction.</p><ul><li>Example</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ListenContractMempoolTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	poolCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> rpc <span class="token operator">=</span> <span class="token string">&quot;wss://polygon-mumbai.g.alchemy.com/v2/***************&quot;</span>

	<span class="token keyword">go</span> mempool<span class="token punctuation">.</span><span class="token function">ContractMempoolTransactions</span><span class="token punctuation">(</span>rpc<span class="token punctuation">,</span>contractAddress<span class="token punctuation">,</span> poolCh<span class="token punctuation">)</span>
	<span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> poolCh <span class="token punctuation">{</span>
		<span class="token keyword">var</span> poolData types<span class="token punctuation">.</span>MempoolData
		<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>poolData<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error unmarshaling&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		amount<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">DecodeBig</span><span class="token punctuation">(</span>poolData<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error decoding hex value&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Transaction From: %s of %s to %s \\n&quot;</span><span class="token punctuation">,</span> poolData<span class="token punctuation">.</span>From<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> poolData<span class="token punctuation">.</span>To<span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),p=[e];function c(i,l){return s(),a("div",null,p)}const r=n(o,[["render",c],["__file","mempool.html.vue"]]),d=JSON.parse('{"path":"/mempool.html","title":"MemPool","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Stream Mempool Transaction","slug":"stream-mempool-transaction","link":"#stream-mempool-transaction","children":[]},{"level":2,"title":"Stream Contract Mempool Transaction","slug":"stream-contract-mempool-transaction","link":"#stream-contract-mempool-transaction","children":[]}],"git":{"updatedTime":1710714791000,"contributors":[{"name":"Ayo Solomon","email":"48213053+Ayoseun@users.noreply.github.com","commits":4}]},"filePathRelative":"mempool.md"}');export{r as comp,d as data};
